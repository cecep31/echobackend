// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package di

import (
	"context"
	"echobackend/config"
	"echobackend/internal/handler"
	"echobackend/internal/middleware"
	"echobackend/internal/repository"
	"echobackend/internal/routes"
	"echobackend/internal/service"
	"echobackend/internal/storage"
	"echobackend/pkg/database"
	"echobackend/pkg/validator"
	"fmt"
	"github.com/google/wire"
	"github.com/labstack/echo/v4"
	"net/http"
)

// Injectors from wire.go:

// BuildApplication builds the application with all dependencies
func BuildApplication(conf *config.Config) (*Application, error) {
	echo := ProvideEcho()
	db := database.NewDatabase(conf)
	userRepository := repository.NewUserRepository(db)
	userService := service.NewUserService(userRepository)
	userHandler := handler.NewUserHandler(userService)
	postRepository := repository.NewPostRepository(db)
	minioStorage := storage.NewMinioStorage(conf)
	postService := service.NewPostService(postRepository, minioStorage)
	postHandler := handler.NewPostHandler(postService)
	authRepository := repository.NewAuthRepository(db)
	authService := service.NewAuthService(authRepository, conf)
	authHandler := handler.NewAuthHandler(authService)
	authMiddleware := middleware.NewAuthMiddleware(conf)
	tagRepository := repository.NewTagRepository(db)
	tagService := service.NewTagService(tagRepository)
	tagHandler := handler.NewTagHandler(tagService)
	pageRepository := repository.NewPageRepository(db)
	pageService := service.NewPageService(pageRepository)
	pageHandler := handler.NewPageHandler(pageService)
	workspaceRepository := repository.NewWorkspaceRepository(db)
	workspaceService := service.NewWorkspaceService(workspaceRepository)
	workspaceHandler := handler.NewWorkspaceHandler(workspaceService)
	routesRoutes := routes.NewRoutes(userHandler, postHandler, authHandler, authMiddleware, tagHandler, pageHandler, workspaceHandler)
	application := ProvideApplication(echo, conf, routesRoutes)
	return application, nil
}

// wire.go:

// Application represents the application with all its dependencies
type Application struct {
	Echo     *echo.Echo
	Config   *config.Config
	Routes   *routes.Routes
	Shutdown func(context.Context) error
}

// Start starts the application server
func (app *Application) Start() {

	go func() {
		addr := fmt.Sprintf(":%s", app.Config.App_Port)
		if err := app.Echo.Start(addr); err != nil && err != http.ErrServerClosed {
			app.Echo.Logger.Fatalf("shutting down the server: %v", err)
		}
	}()
	app.Echo.Logger.Printf("Starting server on port %s", app.Config.App_Port)
}

// Stop gracefully shuts down the application
func (app *Application) Stop(ctx context.Context) error {
	return app.Shutdown(ctx)
}

// Run starts the application and blocks until it's stopped
func (app *Application) Run() {
	app.Start()

	select {}
}

// ProvideEcho provides an Echo instance
func ProvideEcho() *echo.Echo {
	e := echo.New()
	e.HideBanner = true
	e.HidePort = true
	e.Validator = validator.NewValidator()
	return e
}

// ProvideApplication provides the Application struct
func ProvideApplication(
	e *echo.Echo,
	conf *config.Config, routes2 *routes.Routes,
) *Application {
	routes2.
		Setup(e)

	e.GET("/", func(c echo.Context) error {
		return c.JSON(http.StatusOK, &echo.Map{
			"message": "Hello, World!",
		})
	})
	middleware.InitMiddleware(e, conf)

	return &Application{
		Echo:     e,
		Config:   conf,
		Routes:   routes2,
		Shutdown: e.Shutdown,
	}
}

// RepositorySet is a Wire provider set for repositories
var RepositorySet = wire.NewSet(repository.NewUserRepository, repository.NewPostRepository, repository.NewAuthRepository, repository.NewTagRepository, repository.NewPageRepository, repository.NewWorkspaceRepository)

// ServiceSet is a Wire provider set for services
var ServiceSet = wire.NewSet(service.NewUserService, service.NewPostService, service.NewAuthService, service.NewTagService, service.NewPageService, service.NewWorkspaceService)

// HandlerSet is a Wire provider set for handlers
var HandlerSet = wire.NewSet(handler.NewUserHandler, handler.NewPostHandler, handler.NewAuthHandler, handler.NewTagHandler, handler.NewPageHandler, handler.NewWorkspaceHandler)

// InfrastructureSet is a Wire provider set for infrastructure components
var InfrastructureSet = wire.NewSet(
	ProvideEcho, database.NewDatabase, storage.NewMinioStorage, middleware.NewAuthMiddleware, routes.NewRoutes,
)

// ApplicationSet is a Wire provider set for the application
var ApplicationSet = wire.NewSet(
	ProvideApplication,
)
